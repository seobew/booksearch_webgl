<script src="https://threejs.org/examples/js/loaders/OBJLoader.js"></script>
<script src="https://threejs.org/examples/js/loaders/FBXLoader2.js"></script>
<script src="https://threejs.org/examples/js/loaders/MTLLoader.js"></script>
<script src="https://threejs.org/examples/js/loaders/DDSLoader.js"></script>
<script src="https://threejs.org/examples/js/controls/FirstPersonControls.js"></script>
<script src="https://threejs.org/examples/js/controls/TrackballControls.js"></script>
<style>
    *{
        margin:0;
    }
    .loading{
    	color:white;
        /*display: none;*/
    }
    .loader {
        border: 16px solid #f3f3f3; /* Light grey */
        border-top: 16px solid #3498db; /* Blue */
        border-radius: 50%;
        width: 120px;
        height: 120px;
        animation: spin 2s linear infinite;
        position:absolute;
        left:45.5%;
        top:40%;
    }
    .header{
    	height:0px;
    }
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    canvas{
    	width:100% !important;
    	height:100% !important;
    }
</style>
<div class="loading" style="background: black; opacity: 0.5; width:100%; height:100%; position:absolute;"></div>
<div class="loader loading"></div>
<div class="loading" style="width:100%; height:100%; position:absolute; left:48%; top:60%;font-size: 40px;"><span id="percent">0.00</span>%</div>
<script>
	THREE.DefaultLoadingManager.onProgress = function ( item, loaded, total ) {
		$('#percent').text((loaded/total)*100);
	    if(loaded==total){
	    	$('.loading').hide();
	    }
	};
	// roate
	THREE.PerspectiveCamera.prototype.setRotateX = function( deg ){
        if ( typeof( deg ) == 'number' && parseInt( deg ) == deg ){
            this.rotation.x = deg * ( Math.PI / 180 );
        }
    };
    THREE.PerspectiveCamera.prototype.setRotateY = function( deg ){
        if ( typeof( deg ) == 'number' && parseInt( deg ) == deg ){
            this.rotation.y = deg * ( Math.PI / 180 );
        }
    };
    THREE.PerspectiveCamera.prototype.setRotateZ = function( deg ){
        if ( typeof( deg ) == 'number' && parseInt( deg ) == deg ){
            this.rotation.z = deg * ( Math.PI / 180 );
        }
    };
    THREE.PerspectiveCamera.prototype.getRotateX = function(){
        return Math.round( this.rotation.x * ( 180 / Math.PI ) );
    };
    THREE.PerspectiveCamera.prototype.getRotateY = function(){
        return Math.round( this.rotation.y * ( 180 / Math.PI ) );
    };
    THREE.PerspectiveCamera.prototype.getRotateZ = function(){
        return Math.round( this.rotation.z * ( 180 / Math.PI ) );
    };
    function toBox( x, y, z )
    {
        document.getElementById('box').innerHTML = 'X: ' + x + '<br />Y: ' + y + '<br />Z: ' + z;
    }


	var container, stats;
	var camera, scene, renderer, constrols;
	var mouseX = 0, mouseY = 0;
	var windowHalfX = window.innerWidth / 2;
	var windowHalfY = window.innerHeight / 2;
	var VIEW_INCREMENT = 0.1;
	var clock = new THREE.Clock();
	var player = {
	  position : new THREE.Vector3(0.0, 160.0, 1.0),
	  speed : 10, turnSpeed : Math.PI * 0.005
	};
	var keyboard = {};

	var destination = {
	  position : new THREE.Vector3(<%=@shelf_x%>, player.position.y, <%=@shelf_z%>), // example! we should take this position from server
	}
	var floorTex;
	ARROW_ALTITUDE = 142;
	ARROW_DISTANCE = 70;
	var arrowDir = new THREE.Vector2(destination.position.x, destination.position.z);
	ROUTE_WIDTH = 30;
	ROUTE_FLOAT = 50;
	var isAutonavi_ing = false;
	var doMinimap = false;

	var book;



	// model
	var onProgress = function ( xhr ) {
		if ( xhr.lengthComputable ) {
			var percentComplete = xhr.loaded / xhr.total * 100;
			// console.log( Math.round(percentComplete, 2) + '% downloaded' );
		}
	};
	var onError = function ( xhr ) { };
	var mtlLoader = new THREE.MTLLoader();
	var objects = [];
	


	// init();

	
	// render();
	// function init() {
		container = document.createElement( 'div' );
		document.body.appendChild( container );
		camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 3000 );
		camera.position.set(player.position.x, player.position.y, player.position.z);
		camera.lookAt(new THREE.Vector3(0, player.position.y, 0));

		// minimap camera
		var camera_bird = new THREE.OrthographicCamera(-4000, 4000, 3000, -3000, 1, 4000);
		camera_bird.position.set(0, 1000, -1200);
		camera_bird.lookAt(new THREE.Vector3(0, 0, -1200));

		// scene
		scene = new THREE.Scene();

		var playerPointGeom = new THREE.ConeBufferGeometry(50, 40);
		var playerPointMtl = new THREE.MeshBasicMaterial({
		  color: 0xff2222,
		  wireframe: false,
		  depthwrite: false,
		  transparent: true,
		  opacity: 0.7
		});
		var playerPoint = new THREE.Mesh(playerPointGeom, playerPointMtl);
		playerPoint.position.x = camera.position.x;
		playerPoint.position.y = camera.position.y + 200;
		playerPoint.position.z = camera.position.z;
		scene.add(playerPoint);
		// direction guide
		var directionGuideGeom = new THREE.ConeBufferGeometry(2, 20, 10, 1, true);
		var directionGuideMtl = new THREE.MeshBasicMaterial({
		  color: 0xff222,
		  wireframe: false,
		  transparent: true,
		  opacity: 0.3
		});
		var directionGuide = new THREE.Mesh(directionGuideGeom, directionGuideMtl);
		directionGuide.rotation.x -= Math.PI /2;
		directionGuide.position.y = ARROW_ALTITUDE;
		directionGuide.position.z = camera.position.z - ARROW_DISTANCE;
		scene.add(directionGuide);

		var destinationPointGeom = new THREE.ConeBufferGeometry(25, 80, 50);
		var destinationPointMtl = new THREE.MeshBasicMaterial({
		  color: 0xffff22,
		  wireframe: false,
		  depthwrite: false,
		  transparent: true,
		  opacity: 0.6
		});
		var destinationPoint = new THREE.Mesh(destinationPointGeom, destinationPointMtl);
		destinationPoint.rotation.x = Math.PI;
		destinationPoint.position.x = <%=@shelf.x%> +25; // original position value must be here
		destinationPoint.position.y = 300;
		destinationPoint.position.z = <%=@shelf_z%>;
		scene.add(destinationPoint);

		// lights
		var ambientLight0 = new THREE.AmbientLight(0xffffff, 1);
		var pointLight0 = new THREE.PointLight(0xeeffee, 0.7, 10);
		scene.add(ambientLight0);

		mtlLoader.setPath( '/' );
		mtlLoader.load('wall.mtl', function( materials ) { // B sector (3)
			materials.preload();
			var objLoader = new THREE.OBJLoader();
			objLoader.setMaterials( materials );
			objLoader.setPath( '/' );
		  objLoader.load( 'wall.obj', function ( object ) {
		    newCell = object.clone();
		    // newCell.position.x += 300;
		    // newCell.position.x += 1000 + (17*150);
		    newCell.position.z -= 670;
		    scene.add(newCell);
		  }, onProgress, onError );
		});


		mtlLoader.load('mirror.mtl', function( materials ) { // B sector (3)
			materials.preload();
			var objLoader = new THREE.OBJLoader();
			objLoader.setMaterials( materials );
			objLoader.setPath( '/' );
		  objLoader.load( 'mirror.obj', function ( object ) {
		    newCell = object.clone();
		    // newCell.position.x += 300;
		    // newCell.position.x += 1000 + (17*150);
		    newCell.traverse( function ( child ) {
		      if ( child instanceof THREE.Mesh ) {
		        child.material.transparent = true;
		        child.material.depthwrite = false;
		        child.material.opacity = 0.5;
		        child.material.isPhongMaterial = false;
		        // child.material.visible = false;
		      }
		    } );
		    newCell.position.y += 1;
		    newCell.position.z += 150;
		    scene.add(newCell);
		  }, onProgress, onError );
		});

		mtlLoader.load('basicbook.mtl', function( materials ) { // B sector (3)
			materials.preload();
			var objLoader = new THREE.OBJLoader();
			objLoader.setMaterials( materials );
			objLoader.setPath( '/' );
		  objLoader.load( 'basicbook.obj', function ( object ) {
		    newCell = object.clone();
		    newCell.position.x -= 1050;
		    newCell.position.z -= 540;
		    newCell.traverse( function ( child ) {
		        if ( child instanceof THREE.Mesh ) {
		          child.material.transparent = true;
		          child.material.depthwrite = false;
		          child.material.opacity = 0.5;
		          child.material.ambient = 0.1;
		          // child.material.isPhongMaterial = false;
		          // child.material.visible = false;
		        }
		      } );
		    scene.add(newCell);
		  }, onProgress, onError );
		});



		// route guide
		drawRouteGuide();
		function drawRouteGuide(){
		  var routeGuideGeom_x = new THREE.PlaneBufferGeometry(Math.abs(destination.position.x)-ROUTE_WIDTH, ROUTE_WIDTH); // along x axis
		  var routeGuideGeom_z = new THREE.PlaneBufferGeometry(ROUTE_WIDTH, Math.abs(destination.position.z)-ROUTE_WIDTH); // along z axis

		  // var routeGuideGeom_corner = new THREE.CircleBufferGeometry(ROUTE_WIDTH, 30, Math.PI*1.5, Math.PI/2); // fill the corner
		  var routeGuideGeom_corner = new THREE.PlaneBufferGeometry(ROUTE_WIDTH, ROUTE_WIDTH); // fill the corner
		  var routeGuideMtl = new THREE.MeshBasicMaterial({
		    color: 0xff99ff,
		    wireframe: false,
		    transparent: true,
		    opacity: 0.6
		  });
		  var routeGuide_x = new THREE.Mesh(routeGuideGeom_x, routeGuideMtl);
		  routeGuide_x.rotation.x -= Math.PI/2;
		  routeGuide_x.position.x += destination.position.x/2;
		  routeGuide_x.position.y += ROUTE_FLOAT;
		  scene.add(routeGuide_x);
		  var routeGuide_corner = new THREE.Mesh(routeGuideGeom_corner, routeGuideMtl);
		  routeGuide_corner.rotation.x -= Math.PI/2;
		  routeGuide_corner.position.x += destination.position.x;
		  routeGuide_corner.position.y += ROUTE_FLOAT;
		  scene.add(routeGuide_corner);
		  var routeGuide_z = new THREE.Mesh(routeGuideGeom_z, routeGuideMtl);
		  routeGuide_z.rotation.x -= Math.PI/2;
		  routeGuide_z.position.x += destination.position.x;
		  routeGuide_z.position.z += destination.position.z/2; // +- signs would be applied implicitly
		  routeGuide_z.position.y += ROUTE_FLOAT;
		  scene.add(routeGuide_z);
		};


		// Section A
		load_shelf(1800, 720, 2);
		load_shelf(1950, 720, 2);
		load_shelf(2100, 720, 2);
		load_shelf(2250, 720, 2);
		load_shelf(2400, 720, 2);
		load_shelf(2550, 720, 2);
		load_shelf(2700, 720, 2);
		load_shelf(2850, 720, 2);
		load_shelf(3000, 720, 2);
		load_shelf(3150, 720, 1); // anomaly
		load_shelf(3300, 720, 2);
		load_shelf(3450, 720, 2);
		load_shelf(3600, 720, 2);
		load_shelf(3750, 720, 2);

		// Section B
		load_shelf(1000, -180, 3);
		load_shelf(1150, -180, 3);
		load_shelf(1300, -180, 3);
		load_shelf(1450, -180, 3);
		load_shelf(1600, -180, 3);
		load_shelf(1750, -180, 3);
		load_shelf(1900, -180, 3);
		load_shelf(2050, -180, 3);
		load_shelf(2200, -180, 3);
		load_shelf(2350, -720, 1); // anomaly
		load_shelf(2500, -180, 3);
		load_shelf(2650, -180, 3);
		load_shelf(2800, -180, 3);
		load_shelf(2950, -180, 3);
		load_shelf(3100, -180, 2); // anomaly
		load_shelf(3250, -180, 2); // anomaly
		load_shelf(3400, -180, 1); // anomaly
		load_shelf2(3400, -180, 1); // anomaly+
		load_shelf(3550, -180, 1); // anomaly
		load_shelf3(3550, -180, 1); // anomaly+
		load_shelf(3700, -180, 1); // anomaly

		// Section C
		load_shelf(1000, -1190, 3);
		load_shelf(1150, -1190, 3);
		load_shelf(1300, -1190, 3);
		load_shelf(1450, -1190, 3);
		load_shelf(1600, -1460, 2); // anomaly
		load_shelf(1750, -1190, 3);
		load_shelf(1900, -1190, 3);
		load_shelf(2050, -1190, 3);
		load_shelf(2200, -1190, 2); // anomaly
		load_shelf(2350, -1190, 2); // anomaly
		load_shelf(2500, -1190, 1); // anomaly
		load_shelf(2650, -1190, 1); // anomaly

		// section D
		load_shelf(-1200,-360,3);
		load_shelf(-1350,-360,3);
		load_shelf(-1500,-360,3);
		load_shelf(-1650,-360,3);
		load_shelf(-1800,-360,2);
		load_shelf(-1950,-360,3);
		load_shelf(-2100,-360,3);
		load_shelf(-2250,-360,3);
		load_shelf(-2400,-360,3);
		// load_shelf(-2350,-360,3);

		// section E
		load_shelf(-1200,-1370,3);
		load_shelf(-1350,-1370,3);
		load_shelf(-1500,-1370,3);
		load_shelf(-1650,-1370,3);
		load_shelf(-1800,-1370,3);
		load_shelf(-1950,-1370,2);
		load_shelf2(-1950,-1370,2);
		load_shelf(-2100,-1370,2);

		// flooring
		var textureLoader = new THREE.TextureLoader();
		textureLoader.crossOrigin = '';
		floorTex = textureLoader.load("/floor_min.jpg");
		floorTex.wrapS = THREE.RepeatWrapping;
		floorTex.wrapT = THREE.RepeatWrapping;
		floorTex.repeat.set( 30, 20 );
		floorTex.generateMipmaps = true;
		floorTex.minFilter = THREE.LinearFilter;
		floorTex.magFilter = THREE.LinearFilter;
		var floorGeom = new THREE.PlaneGeometry(9000, 6000);
		var floorMtl = new THREE.MeshPhongMaterial({
		  color: 0xffffff,
		  wireframe: false,
		  map: floorTex
		});
		var floor = new THREE.Mesh(floorGeom, floorMtl);
		floor.rotation.x = -Math.PI/2;
		floor.position.z -= 1200;
		scene.add(floor);

		// new book;

		// renderer
		renderer = new THREE.WebGLRenderer({antialias:true});
		renderer.setPixelRatio( window.devicePixelRatio );
		renderer.setSize( window.innerWidth, window.innerHeight );
		renderer.setClearColor('white');
		container.appendChild( renderer.domElement );
		// document.addEventListener( 'mousemove', onDocumentMouseMove, false );
		//
		window.addEventListener( 'resize', onWindowResize, false );
		// renderer.render( scene, camera );
	// }

	function load_shelf(x, z, status){
		mtlLoader.load( 'book3.mtl', function( materials ) {
			materials.preload();
			var objLoader = new THREE.OBJLoader();
			objLoader.setMaterials( materials );
			// 만약 넘어온 데이터의 x,z값이 같다면, 투명하지 않게 하기
			objLoader.setPath( '/' );
			objLoader.load( 'book3.obj', function ( object ) {
				for (var i = 0; i<3; i++){
					if(status<=i){
						continue;
					}
					newCell = object.clone();
					if(status==1){
						newCell.position.set(x, newCell.position.y, z);	
					}
					else{
						newCell.position.set(x, newCell.position.y, z-270*i);	
					}
					if(x!=<%=@shelf.x%> || z!=<%=@shelf.z%>){
					newCell.traverse( function ( child ) {
				        if ( child instanceof THREE.Mesh ) {
				          child.material.transparent = true;
				          child.material.depthwrite = false;
				          child.material.opacity = 0.5;
				          child.material.ambient = 0.1;
				          // child.material.isPhongMaterial = false;
				          // child.material.visible = false;
				        }
				      } );
					}

		            scene.add(newCell);
		            objects.push(newCell);
				}
			}, onProgress, onError );
		});
	}

	function load_shelf2(x, z, status){
		mtlLoader.load( 'book2.mtl', function( materials ) {
			materials.preload();
			var objLoader = new THREE.OBJLoader();
			objLoader.setMaterials( materials );
			objLoader.setPath( '/' );
			objLoader.load( 'book2.obj', function ( object ) {
				newCell = object.clone();
				if (status==2){
					newCell.position.set(x, newCell.position.y, z-540);
				}
				else{
					newCell.position.set(x, newCell.position.y, z-270);
				}
				if(x!=<%=@shelf.x%> || z!=<%=@shelf.z%>){
					newCell.traverse( function ( child ) {
				        if ( child instanceof THREE.Mesh ) {
				          child.material.transparent = true;
				          child.material.depthwrite = false;
				          child.material.opacity = 0.5;
				          child.material.ambient = 0.1;
				          // child.material.isPhongMaterial = false;
				          // child.material.visible = false;
				        }
				      } );
				}


	            scene.add(newCell);
	            objects.push(newCell);
			}, onProgress, onError );
		});
	}

	function load_shelf3(x, z, status){
		mtlLoader.load( 'book1.mtl', function( materials ) {
			materials.preload();
			var objLoader = new THREE.OBJLoader();
			objLoader.setMaterials( materials );
			objLoader.setPath( '/' );
			objLoader.load( 'book1.obj', function ( object ) {
				newCell = object.clone();
				if (status==2){
					newCell.position.set(x, newCell.position.y, z-540);
				}else{
					newCell.position.set(x, newCell.position.y, z-270);
				}

				if(x!=<%=@shelf.x%> || z!=<%=@shelf.z%>){
				newCell.traverse( function ( child ) {
			        if ( child instanceof THREE.Mesh ) {
			          child.material.transparent = true;
			          child.material.depthwrite = false;
			          child.material.opacity = 0.5;
			          child.material.ambient = 0.1;
			          // child.material.isPhongMaterial = false;
			          // child.material.visible = false;
			        }
			      } );
				}

	            scene.add(newCell);
	            objects.push(newCell);
			}, onProgress, onError );
		});
	}


	// function check(e) {
	// 	var delta = 10;
	// 	event = event || window.event;
	//     var code = e.keyCode;
	//     switch (code) {
	//         case 37:
	//         	camera.rotation.y += player.turnSpeed;
	//         	break; //Left key
	//         case 38:
	// 			camera.position.x -= Math.sin(camera.rotation.y) * player.speed;
	// 		    camera.position.z -= Math.cos(camera.rotation.y) * player.speed;
	//         	break; //Up key
	//         case 39:
	//         	camera.rotation.y -= player.turnSpeed;
	//         	break; //Right key
	//         case 40:
	//        		camera.position.x += Math.sin(camera.rotation.y) * player.speed;
	// 		    camera.position.z += Math.cos(camera.rotation.y) * player.speed;
	//         	break; //Down key
	//         default: console.log(code); //Everything else
	//     }
 //   		toBox( camera.position.x, camera.position.y, camera.position.z );
	// }

	// window.addEventListener('keydown',this.check,false);

	animate();
	
	function onWindowResize() {
		windowHalfX = window.innerWidth / 2;
		windowHalfY = window.innerHeight / 2;
		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();
		renderer.setSize( window.innerWidth, window.innerHeight );
	}
	
	function onDocumentMouseMove( event ) {
		mouseX = ( event.clientX - windowHalfX ) / 2;
		mouseY = ( event.clientY - windowHalfY ) / 2;
	}
	//
	function animate() {
		requestAnimationFrame( animate );

		 if(destinationPoint.position.y<250){
		    destinationPoint.position.y = 350;
		  }
		  destinationPoint.position.y -= 5;

		if(keyboard[37]){ // left-arrow key
	      camera.rotation.y += player.turnSpeed;
	    }
	    if(keyboard[39]){ // right-arrow key
	      camera.rotation.y -= player.turnSpeed;
	    }

		if(keyboard[87]){ // w key
	      camera.position.x -= Math.sin(camera.rotation.y) * player.speed;
	      camera.position.z -= Math.cos(camera.rotation.y) * player.speed;
	      // playerLight.position.set(camera.position.x, player.pos.y, camera.position.z);
	    }
	    if(keyboard[83]){ // s key
	      camera.position.x += Math.sin(camera.rotation.y) * player.speed;
	      camera.position.z += Math.cos(camera.rotation.y) * player.speed;
	      // playerLight.position.set(camera.position.x, player.pos.y, camera.position.z);
	    }
	    if(keyboard[65]){ // a key
	      camera.position.x += Math.sin(camera.rotation.y - Math.PI/2) * player.speed;
	      camera.position.z += Math.cos(camera.rotation.y - Math.PI/2) * player.speed;
	      // playerLight.position.set(camera.position.x, player.pos.y, camera.position.z);
	    }
	    if(keyboard[68]){ // d key
	      camera.position.x -= Math.sin(camera.rotation.y - Math.PI/2) * player.speed;
	      camera.position.z -= Math.cos(camera.rotation.y - Math.PI/2) * player.speed;
	      // playerLight.position.set(camera.position.x, player.pos.y, camera.position.z);
	    }
	    if(keyboard[77]){
    		doMinimap = true;
  		}
		if(!keyboard[77]){
    		doMinimap = false;
  		}

  		playerPoint.position.x = camera.position.x;
    	playerPoint.position.z = camera.position.z;

	    directionGuide.position.set(
	      directionGuide.position.x = camera.position.x - ARROW_DISTANCE * Math.sin(camera.rotation.y),
	      ARROW_ALTITUDE,
	      directionGuide.position.z = camera.position.z - ARROW_DISTANCE * Math.cos(camera.rotation.y)
	    );

	    arrowDir.x = destination.position.x - camera.position.x;
	    arrowDir.y = destination.position.z - camera.position.z;
	    directionGuide.rotation.z = -(Math.PI/2 + arrowDir.angle());

		render();
		// controls.update();
	}

	function keyDown(event){
	  keyboard[event.keyCode] = true;
	  if(keyboard[82]){
	    autonavi(1);
	  }
	  if(keyboard[27]){
	    autonavi(0);
	  }
	}

	function keyUp(event){
	  keyboard[event.keyCode] = false;
	}

	window.addEventListener('keydown', keyDown);
	window.addEventListener('keyup', keyUp);

	function render() {
		if(!doMinimap){
		    renderer.render(scene, camera);
		}
		else{
		    renderer.render(scene, camera_bird);
		}

	}
</script>